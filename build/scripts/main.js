/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/main.js":
/*!*****************************!*\
  !*** ./src/scripts/main.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\n\n\n\nfunction _createForOfIteratorHelper2(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }\n\nfunction _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  xxl: 1600\n};\nvar $wrapper = document.querySelector('.wrapper');\ncustomScroll();\n$(document).ready(function () {\n  CustomInteractionEvents.init();\n  select.init();\n  inputs();\n  search();\n  nav();\n  toggle();\n  scrollTo();\n  popup.init();\n  slider.init();\n  tooltips.init();\n  fixedBlocks();\n  tabs();\n  scrollToTab();\n  Header.init();\n  ScrollTop.init();\n  diagram();\n  rating();\n  calculator();\n  stagesToggle();\n  jsRange();\n  gridToggle();\n  comparison();\n  lazy(); //slider constructor\n\n  document.querySelectorAll('.slider-constructor').forEach(function ($this) {\n    new SliderConstructor($this).init();\n  });\n  gallery();\n});\n\nfunction throttle(func, interval, context) {\n  var isCooldown = false;\n  return function () {\n    if (isCooldown) return;\n    func.apply(context || this, arguments);\n    isCooldown = true;\n    setTimeout(function () {\n      return isCooldown = false;\n    }, interval);\n  };\n}\n\nfunction debounce(func, interval, context) {\n  var timeout = false;\n  return function () {\n    var _arguments = arguments,\n        _this5 = this;\n\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      func.apply(context || _this5, _arguments);\n    }, interval);\n  };\n}\n\nfunction getParent(elemSelector, parentSelector) {\n  var elem = document.querySelector(elemSelector);\n  var parents = document.querySelectorAll(parentSelector);\n\n  for (var i = 0; i < parents.length; i++) {\n    var parent = parents[i];\n\n    if (parent.contains(elem)) {\n      return parent;\n    }\n  }\n\n  return null;\n}\n\nvar CustomInteractionEvents = Object.create({\n  targets: {\n    value: 'a, button, label, input, textarea, tr, [data-custom-interaction], .selectric-items li, .selectric .label, .button, .comparison-property, .image-zoom, .content-image'\n  },\n  delay: {\n    value: 100\n  },\n  init: function init() {\n    var _this6 = this;\n\n    this.events = function (event) {\n      var $targets = [];\n      $targets[0] = event.target !== document ? event.target.closest(_this6.targets.value) : null;\n      var $element = $targets[0],\n          i = 0;\n\n      while ($targets[0]) {\n        $element = $element.parentNode;\n\n        if ($element !== document) {\n          if ($element.matches(_this6.targets.value)) {\n            i++;\n            $targets[i] = $element;\n          }\n        } else {\n          break;\n        }\n      } //touchstart\n\n\n      if (event.type == 'touchstart') {\n        _this6.touched = true;\n        if (_this6.timeout) clearTimeout(_this6.timeout);\n\n        if ($targets[0]) {\n          var _iterator = _createForOfIteratorHelper2($targets),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var $target = _step.value;\n              $target.setAttribute('data-touch', '');\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } //touchend\n      else if (event.type == 'touchend' || event.type == 'contextmenu' && _this6.touched) {\n        _this6.timeout = setTimeout(function () {\n          _this6.touched = false;\n        }, 500);\n\n        if ($targets[0]) {\n          setTimeout(function () {\n            var _iterator2 = _createForOfIteratorHelper2($targets),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _$target = _step2.value;\n\n                _$target.removeAttribute('data-touch');\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }, _this6.delay.value);\n        }\n      } //mouseenter\n\n\n      if (event.type == 'mouseenter' && !_this6.touched && $targets[0] && $targets[0] == event.target) {\n        $targets[0].setAttribute('data-hover', '');\n      } //mouseleave\n      else if (event.type == 'mouseleave' && !_this6.touched && $targets[0] && $targets[0] == event.target) {\n        $targets[0].removeAttribute('data-click');\n        $targets[0].removeAttribute('data-hover');\n      } //mousedown\n\n\n      if (event.type == 'mousedown' && !_this6.touched && $targets[0]) {\n        $targets[0].setAttribute('data-click', '');\n      } //mouseup\n      else if (event.type == 'mouseup' && !_this6.touched && $targets[0]) {\n        $targets[0].removeAttribute('data-click');\n      }\n    };\n\n    document.addEventListener('touchstart', this.events);\n    document.addEventListener('touchend', this.events);\n    document.addEventListener('mouseenter', this.events, true);\n    document.addEventListener('mouseleave', this.events, true);\n    document.addEventListener('mousedown', this.events);\n    document.addEventListener('mouseup', this.events);\n    document.addEventListener('contextmenu', this.events);\n  }\n});\n\nfunction lazy() {\n  //add lazy backgrounds\n  document.addEventListener('lazybeforeunveil', function (e) {\n    var el = e.target.tagName,\n        bg = e.target.getAttribute('data-src'),\n        parent = e.target.parentNode;\n\n    if (el !== 'IMG') {\n      var _bg = e.target.getAttribute('data-src');\n\n      e.target.style.backgroundImage = \"url('\".concat(_bg, \"')\");\n    }\n  });\n  lazySizes.init();\n}\n\nwindow.popup = {\n  init: function init() {\n    this.$trigger = $('[data-popup-open]');\n    this.$close = $('[data-popup-close]');\n    this.$trigger.on('click', function (event) {\n      event.preventDefault();\n      var $popup = $($(this).attr('href'));\n\n      if ($popup.length) {\n        popup.open($popup);\n      }\n    });\n    $(document).on('click', function (event) {\n      var $target = $(event.target);\n\n      if ($target.closest(popup.$close).length || $target.closest('.popup').length && $target.closest('.popup-block__container').length == 0) {\n        event.preventDefault();\n        var $popup = $target.closest('.popup').length ? $target.closest('.popup') : $('.city-question-popup');\n        popup.close($popup);\n      }\n    });\n  },\n  open: function open($popup) {\n    var _this = this;\n\n    var event = function event() {\n      _this.active = $popup;\n      scrollLock.disablePageScroll();\n      $popup.addClass('active');\n    };\n\n    if (this.active) {\n      popup.close(this.active, function () {\n        event();\n      });\n    } else {\n      event();\n    }\n  },\n  close: function close($popup, callback) {\n    var _this2 = this;\n\n    $popup.removeClass('active');\n    setTimeout(function () {\n      scrollLock.enablePageScroll();\n      _this2.active = undefined;\n      typeof callback === 'function' && callback();\n    }, 250);\n  }\n};\n\nfunction inputs() {\n  var $form = $('.js-validation'),\n      $input = $('input, textarea');\n  $input.on('focus', function () {\n    $(this).addClass('focused');\n  });\n  $input.on('blur', function () {\n    $(this).removeClass('focused');\n  });\n  $input.on('input change', function () {\n    check();\n  });\n\n  function check() {\n    $input.each(function () {\n      var value = $(this).val();\n\n      if (value == '') {\n        $(this).removeClass('filled');\n        $(this).parent().removeClass('filled');\n      } else {\n        $(this).addClass('filled');\n        $(this).parent().addClass('filled');\n      }\n    });\n  }\n\n  check();\n  var namspaces = {\n    phone: '[name=\"phone\"], .phone',\n    email: '[name=\"email\"]',\n    name: '[name=\"name\"]',\n    message: '[name=\"message\"]',\n    review: '[name=\"review\"]'\n  },\n      conditions = {\n    phone: {\n      format: {\n        pattern: /^\\+7\\s\\(?\\d{3}\\)?\\s\\d{3}\\-\\d{2}-?\\d{2}$|()/,\n        message: '^Некорректный номер телефона'\n      },\n      presence: {\n        allowEmpty: false,\n        message: '^Введите номер телефона'\n      }\n    },\n    email: {\n      email: {\n        message: '^Неправильный формат email-адреса'\n      }\n    },\n    name: {\n      presence: {\n        allowEmpty: false,\n        message: '^Введите ваше имя'\n      },\n      length: {\n        minimum: 3,\n        tooShort: \"^Имя слишком короткое (минимум %{count} символа)\",\n        maximum: 60,\n        tooLong: \"^Имя слишком длинное (максимум %{count} символов)\"\n      }\n    },\n    message: {\n      presence: {\n        allowEmpty: false,\n        message: '^Введите ваше сообщение'\n      },\n      length: {\n        minimum: 10,\n        tooShort: \"^Сообщение слишком короткое (минимум %{count} символов)\",\n        maximum: 200,\n        tooLong: \"^Сообщение слишком длинное (максимум %{count} символов)\"\n      }\n    },\n    review: {\n      presence: {\n        allowEmpty: false,\n        message: '^Напишите ваш отзыв'\n      },\n      length: {\n        minimum: 10,\n        tooShort: \"^Отзыв слишком короткий (минимум %{count} символов)\",\n        maximum: 200,\n        tooLong: \"^Отзыв слишком длинный (максимум %{count} символов)\"\n      }\n    }\n  },\n      mask = Inputmask({\n    mask: \"+9 (999) 999-99-99\",\n    showMaskOnHover: false,\n    clearIncomplete: false\n  }).mask(namspaces.phone); //validation events\n\n  $form.each(function () {\n    var $form = $(this),\n        $inputs = $form.find('input, textarea');\n    $inputs.on('input', function () {\n      var _this3 = this;\n\n      setTimeout(function () {\n        validateForm($(_this3));\n      }, 100);\n    });\n\n    function validateForm($input) {\n      var values = {};\n      var constraints = {};\n      $inputs.each(function () {\n        var $input = $(this);\n\n        for (var key in namspaces) {\n          if ($input.is(namspaces[key]) && ($(this).hasClass('required') || $(this).hasClass('filled'))) {\n            values[key] = $input.val();\n            constraints[key] = conditions[key];\n          }\n        }\n      });\n      var resault = validate(values, constraints);\n\n      if (resault !== undefined) {\n        if ($input !== undefined) {\n          var flag = true;\n\n          for (var key in resault) {\n            if ($input.is(namspaces[key]) && ($input.hasClass('required') || $input.hasClass('filled'))) {\n              flag = false;\n            }\n          }\n\n          if (flag) {\n            $input.removeClass('error');\n          }\n        } else {\n          $inputs.removeClass('error');\n          $inputs.parent().find('.input__message').remove();\n\n          var _loop = function _loop(_key) {\n            $inputs.each(function () {\n              var $input = $(this);\n\n              if ($input.is(namspaces[_key]) && ($input.hasClass('required') || $input.hasClass('filled'))) {\n                $input.addClass('error');\n                $input.parent().append(\"<span class=\\\"input__message\\\">\".concat(resault[_key][0], \"</span>\"));\n              }\n            });\n          };\n\n          for (var _key in resault) {\n            _loop(_key);\n          }\n        }\n\n        return false;\n      } else {\n        $inputs.removeClass('error');\n        $inputs.parent().find('.input__message').remove();\n        return true;\n      }\n    }\n\n    $form.on('submit', function (event) {\n      // event.preventDefault();\n      if (validateForm()) {\n        /* $inputs.val('').trigger('change');\n        popup.open($('#succes'));  */\n      } else {\n        event.preventDefault();\n      }\n    });\n  });\n}\n\nfunction search() {\n  var $parent = $('.search');\n  $parent.each(function () {\n    var $this = $(this),\n        $input = $this.find('.search__input'),\n        $content = $this.find('.search__content'),\n        focus = false,\n        mouseenter = false;\n    /* $content.on('mouseenter mouseleave', function (event) {\n      if (device.desktop()) {\n        if (event.type == 'mouseenter') {\n          mouseenter = true;\n        } else {\n          mouseenter = false;\n           if (!focus) {\n            $this.removeClass('active-content');\n          }\n        }\n      }\n    }); */\n\n    $input.on('blur focus input', function (event) {\n      if (event.type == 'blur') {\n        focus = false;\n        /* if (!mouseenter && device.desktop()) {\n          $this.removeClass('active-content');\n        } */\n      } else if (event.type == 'focus') {\n        focus = true;\n      } else {\n        var val = $(this).val();\n\n        if (val !== '') {\n          $this.addClass('active');\n          /* $this.addClass('active-content'); */\n        } else {\n          $this.removeClass('active');\n          /* $this.removeClass('active-content'); */\n        }\n      }\n    });\n    /* \n    $(document).on('touchstart', function (event) {\n      var $target = $(event.target);\n       if ($target.closest($this).length == 0) {\n        $this.removeClass('active-content');\n      }\n    }); */\n  });\n}\n\nfunction customScroll() {\n  var $containers = document.querySelectorAll('.scrollbar');\n  $containers.forEach(function ($element) {\n    var $this = $($element),\n        $container,\n        $content;\n\n    if (device.desktop() && !$this.is('.scrollbar_mobile-only')) {\n      var simpleBar = new SimpleBar($element);\n      $container = $this;\n      $content = $this.find('.scrollbar__content'); //event\n\n      simpleBar.getScrollElement().addEventListener('scroll', function () {\n        gradientCheck();\n      });\n    } else {\n      $this.addClass('scrollbar_mobile');\n      $container = $this.find('.scrollbar__content');\n      $content = $this.find('.scrollbar__inner'); //event\n\n      $container.on('scroll', function () {\n        gradientCheck();\n      });\n    }\n\n    $container.add($content).attr('data-scroll-lock-scrollable', '');\n    gradientCheck();\n\n    function gradientCheck() {\n      var scrollHeight = $content.outerHeight() - $container.outerHeight(),\n          scroll = $container.offset().top - $content.offset().top;\n\n      if (scroll > 0) {\n        $this.removeClass('scrollbar_start');\n      } else {\n        $this.addClass('scrollbar_start');\n      }\n\n      if (scroll < scrollHeight) {\n        $this.removeClass('scrollbar_end');\n      } else {\n        $this.addClass('scrollbar_end');\n      }\n    }\n  });\n}\n\nvar slider = {\n  el: $('.slider'),\n  arrowPrev: '<svg class=\"icon\" viewBox=\"0 0 10.5 18.1\"><path stroke=\"none\" d=\"M9,0l1.4,1.4L2.8,9l7.6,7.6L9,18.1L0,9C0,9,9.1,0,9,0z\"></path></svg>',\n  arrowNext: '<svg class=\"icon\" viewBox=\"0 0 10.5 18.1\"><path stroke=\"none\" d=\"M1.4,18.1L0,16.7l7.6-7.6L0,1.5L1.4,0l9,9.1C10.4,9.1,1.3,18.1,1.4,18.1z\"></path></svg>',\n  init: function init() {\n    slider.el.each(function () {\n      var _this4 = this;\n\n      var slideCount = 1,\n          slideCountLg = 1,\n          slideCountMd = 1,\n          slideCountSm = 1,\n          slideCountXs = 1,\n          rows = 1,\n          rowsXs = 1,\n          arrows = false,\n          dots = false,\n          centerMode = false,\n          autoplay = false,\n          nextArrow = \"<button type=\\\"button\\\" class=\\\"button button_style-1 slider__next\\\">\".concat(slider.arrowNext, \"</button>\"),\n          prevArrow = \"<button type=\\\"button\\\" class=\\\"button button_style-1 slider__prev\\\">\".concat(slider.arrowPrev, \"</button>\");\n\n      if ($(this).is('.slider_dots')) {\n        dots = true;\n      }\n\n      if ($(this).is('.slider_arrows')) {\n        arrows = true;\n      }\n\n      if ($(this).is('.slider_grid')) {\n        arrows = true;\n        dots = true;\n      }\n\n      if ($(this).is('.slider_2v')) {\n        rows = 2;\n      } //sliders\n\n\n      if ($(this).is('.popular-projects__slider')) {\n        slideCount = 2;\n        slideCountLg = 2;\n        slideCountMd = 2;\n        slideCountSm = 2;\n        slideCountXs = 1;\n\n        if ($(this).is('.popular-projects__slider_mobile-only')) {\n          var initialized = false;\n\n          var check = function check() {\n            if ($(window).width() < breakpoints.sm && !initialized) {\n              initialized = true;\n              initSlider($(_this4));\n            } else if ($(window).width() >= breakpoints.sm && initialized) {\n              initialized = false;\n              setTimeout(function () {\n                $(_this4).slick('unslick');\n              }, 500);\n            }\n          };\n\n          check();\n          $(window).on('resize', function () {\n            check();\n          });\n        } else {\n          if ($(this).is('.popular-projects__slider_type-2')) {\n            rows = 2;\n          }\n\n          initSlider($(this));\n        }\n      } else if ($(this).is('.popular-projects__slider-2')) {\n        slideCountSm = 2;\n        slideCountXs = 1;\n        rows = 2;\n\n        if ($(this).is('.popular-projects__slider-2_type-2')) {\n          rows = 4;\n        }\n\n        initSlider($(this));\n      } else if ($(this).is('.home-banner')) {\n        var $this = $(this);\n        autoplay = true;\n        nextArrow = \"<button class=\\\"home-banner__arrow home-banner__next\\\" aria-label=\\\"Next\\\" type=\\\"button\\\">\".concat(slider.arrowNext, \"</button>\");\n        prevArrow = \"<button class=\\\"home-banner__arrow home-banner__prev\\\" aria-label=\\\"Previous\\\" type=\\\"button\\\">\".concat(slider.arrowPrev, \"</button>\"); //set size\n\n        var res_desktop = $(this).attr('data-desktop-ratio'),\n            res_mobile = $(this).attr('data-mobile-ratio'),\n            w,\n            h;\n\n        var checkSize = function checkSize() {\n          w = $this.width(), h = $(window).width() < breakpoints.md ? w * res_mobile : w * res_desktop;\n          $this.height(h);\n        };\n\n        checkSize();\n        $(window).on('resize', function () {\n          checkSize();\n        });\n        initSlider($(this));\n      } else if ($(this).is('.photo-slider')) {\n        initSlider($(this));\n      } else if ($(this).is('.news-preview-section__slider')) {\n        slideCount = 3;\n        slideCountLg = 3;\n        slideCountMd = 2;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.section-partners__slider')) {\n        autoplay = true;\n        slideCount = 6;\n        slideCountLg = 5;\n        slideCountMd = 4;\n        slideCountSm = 3;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.projects-slider') || $(this).is('.progress-projects-slider')) {\n        slideCount = 4;\n        slideCountLg = 3;\n        slideCountMd = 2;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.product-slider')) {\n        if ($(this).is('.product-slider_style-2')) {\n          slideCount = 4;\n          slideCountLg = 3;\n        } else {\n          slideCount = 5;\n          slideCountLg = 4;\n        }\n\n        if ($(this).is('.product-slider_rows-2')) {\n          rows = 2;\n          rowsXs = 2;\n        } else if ($(this).is('.product-slider_rows-3')) {\n          rows = 3;\n          rowsXs = 2;\n        }\n\n        slideCountMd = 3;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.wiki-slider')) {\n        slideCount = 4;\n        slideCountLg = 3;\n        slideCountMd = 3;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.mobile-advertising__slider')) {\n        slideCountLg = 4;\n        slideCountMd = 3;\n        slideCountSm = 2;\n        slideCountXs = 2;\n        var _initialized = false;\n\n        var _check2 = function check() {\n          if ($(window).width() < breakpoints.xl && !_initialized) {\n            _initialized = true;\n            initSlider($(_this4));\n          } else if ($(window).width() >= breakpoints.xl && _initialized) {\n            _initialized = false;\n            setTimeout(function () {\n              $(_this4).slick('unslick');\n            }, 500);\n          }\n        };\n\n        _check2();\n\n        $(window).on('resize', function () {\n          _check2();\n        });\n      } else if ($(this).is('.slider_4h')) {\n        slideCount = 4;\n        slideCountLg = 3;\n        slideCountMd = 3;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      } else if ($(this).is('.slider_3h')) {\n        slideCount = 3;\n        slideCountLg = 3;\n        slideCountMd = 2;\n        slideCountSm = 2;\n        slideCountXs = 1;\n        initSlider($(this));\n      }\n\n      function initSlider($target) {\n        $target.slick({\n          rows: rows,\n          infinite: true,\n          dots: dots,\n          arrows: arrows,\n          nextArrow: nextArrow,\n          prevArrow: prevArrow,\n          speed: 500,\n          centerMode: centerMode,\n          slidesToShow: slideCount,\n          slidesToScroll: slideCount,\n          autoplay: autoplay,\n          autoplaySpeed: $target.data('autoplay-timeout') || 5000,\n          responsive: [{\n            breakpoint: breakpoints.xl,\n            settings: {\n              slidesToShow: slideCountLg,\n              slidesToScroll: slideCountLg\n            }\n          }, {\n            breakpoint: breakpoints.lg,\n            settings: {\n              slidesToShow: slideCountMd,\n              slidesToScroll: slideCountMd\n            }\n          }, {\n            breakpoint: breakpoints.md,\n            settings: {\n              slidesToShow: slideCountSm,\n              slidesToScroll: slideCountSm\n            }\n          }, {\n            breakpoint: breakpoints.sm,\n            settings: {\n              slidesToShow: slideCountXs,\n              slidesToScroll: slideCountXs,\n              rows: rowsXs\n            }\n          }]\n        });\n      }\n\n      if ($(this).is('.item-slider')) {\n        $(this).slick({\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          arrows: false,\n          rows: 0,\n          asNavFor: '.nav-slider',\n          responsive: [{\n            breakpoint: breakpoints.md,\n            settings: {\n              dots: true\n            }\n          }]\n        });\n      }\n\n      if ($(this).is('.nav-slider')) {\n        $(this).slick({\n          slidesToShow: 3,\n          slidesToScroll: 1,\n          asNavFor: '.item-slider',\n          dots: false,\n          rows: 0,\n          centerMode: true,\n          centerPadding: 0,\n          focusOnSelect: true,\n          prevArrow: \"<button type=\\\"button\\\" class=\\\"nav-slider__arrow nav-slider__arrow-prev\\\">\".concat(slider.arrowPrev, \"</button>\"),\n          nextArrow: \"<button type=\\\"button\\\" class=\\\"nav-slider__arrow nav-slider__arrow-next\\\">\".concat(slider.arrowNext, \"</button>\")\n        });\n      } //comparison slider\n\n\n      if ($(this).is('.comparison-slider')) {\n        var $slider = $('.comparison-slider'),\n            $slideCount = $('.comparison__counter span:last-child'),\n            $slideCurrent = $('.comparison__counter span:first-child');\n\n        var _check = function _check(count) {\n          var $active = $slider.find('.slick-active');\n          $slideCount.text(count);\n          $slideCurrent.text(\"\".concat($active.first().index() + 1, \"\\u2013\").concat($active.last().index() + 1, \" \"));\n        };\n\n        $slider.on('init', function (event, slick) {\n          _check(slick.slideCount);\n        });\n        $slider.on('afterChange', function (event, slick, currentSlide, nextSlide) {\n          _check(slick.slideCount);\n        });\n        $slider.slick({\n          slidesToShow: 4,\n          slidesToScroll: 4,\n          arrows: true,\n          dots: false,\n          infinite: false,\n          nextArrow: \"<button type=\\\"button\\\" class=\\\"button button_style-1 slider__next\\\"><span>\\u0421\\u043B\\u0435\\u0434.</span>\".concat(slider.arrowNext, \"</button>\"),\n          prevArrow: \"<button type=\\\"button\\\" class=\\\"button button_style-1 slider__prev\\\">\".concat(slider.arrowPrev, \"<span>\\u041F\\u0440\\u0435\\u0434.</span></button>\"),\n          rows: 0,\n          responsive: [{\n            breakpoint: breakpoints.xl,\n            settings: {\n              slidesToShow: 3,\n              slidesToScroll: 3\n            }\n          }, {\n            breakpoint: breakpoints.lg,\n            settings: {\n              slidesToShow: 2,\n              slidesToScroll: 2\n            }\n          }]\n        });\n      }\n    });\n  }\n}; //select\n\nvar select = {\n  init: function init() {\n    this.items = $('select');\n\n    if (this.items.length) {\n      this.items.selectric({\n        disableOnMobile: false,\n        nativeOnMobile: false,\n        arrowButtonMarkup: '<svg class=\"icon\" viewBox=\"0 0 12 7\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.72606 -1.19209e-07L11.1403 1.41421L5.57036 6.98453L4.15614 5.57031L9.72606 -1.19209e-07Z\"/><path d=\"M0 1.41421L1.41421 1.19209e-07L6.98434 5.57047L5.57036 6.98453L0 1.41421Z\"/></svg>'\n      });\n    }\n  }\n};\nvar Header = {\n  init: function init() {\n    var _this7 = this;\n\n    this.$element = document.querySelector('.header');\n    this.$top = document.querySelector('.header__top');\n    this.$bottom = document.querySelector('.header__bottom');\n\n    this.check = function () {\n      var h1 = _this7.$top.getBoundingClientRect().height + _this7.$bottom.getBoundingClientRect().height,\n          h2 = _this7.$element.getBoundingClientRect().height;\n\n      if (window.pageYOffset > h1 && !_this7.state) {\n        _this7.state = true;\n        _this7.h_old = h1;\n        $wrapper.style.paddingTop = \"\".concat(h2, \"px\");\n\n        _this7.$element.classList.add('header_fixed');\n      } else if (window.pageYOffset < _this7.h_old && _this7.state) {\n        _this7.state = false;\n        $wrapper.style.paddingTop = '0px';\n\n        _this7.$element.classList.remove('header_fixed');\n      }\n    };\n\n    this.check();\n    window.addEventListener('scroll', this.check);\n  }\n};\nvar ScrollTop = {\n  init: function init() {\n    var _this8 = this;\n\n    this.$trigger = document.querySelector('.js-scroll-top');\n\n    this.check = function () {\n      if (window.pageYOffset > 50 && !_this8.state) {\n        _this8.$trigger.classList.add('visible');\n\n        _this8.state = true;\n      } else if (window.pageYOffset <= 50 && _this8.state) {\n        _this8.$trigger.classList.remove('visible');\n\n        _this8.state = false;\n      }\n    };\n\n    this.check();\n    window.addEventListener('scroll', this.check);\n    this.$trigger.addEventListener('click', function () {\n      $(\"html, body\").animate({\n        scrollTop: 0\n      }, 500);\n    });\n  }\n};\n\nfunction nav() {\n  var $toggle = $('.nav-toggle'),\n      $nav = $('.mobile-nav'),\n      state;\n  $toggle.on('click', function (event) {\n    event.preventDefault();\n\n    if (!state) {\n      open();\n    } else {\n      close();\n    }\n  });\n\n  function open() {\n    state = true;\n    scrollLock.disablePageScroll();\n    $nav.add($toggle).addClass('active');\n  }\n\n  function close() {\n    state = false;\n    scrollLock.enablePageScroll();\n    $nav.add($toggle).removeClass('active');\n  }\n}\n\nfunction toggle() {\n  var $section = $('.toggle-section'),\n      speed = 250;\n  $section.each(function () {\n    var $this = $(this),\n        $toggle = $this.children('.toggle-section__head'),\n        $content = $this.children('.toggle-section__content'),\n        state = $this.hasClass('active') ? true : false,\n        initialized,\n        height = $content.height();\n\n    if ($this.is('[data-out-hide]')) {\n      $(document).on('click touchstart', function (event) {\n        var $target = $(event.target);\n\n        if (!$target.closest($content).length && !$target.closest($toggle).length && state) {\n          state = false;\n          check();\n        }\n      });\n    }\n\n    $toggle.on('click', function () {\n      state = !state ? true : false;\n      check();\n    });\n\n    function check() {\n      if (state) {\n        $this.add($content).add($toggle).addClass('active');\n\n        if (!$this.is('[data-class-only]')) {\n          if ($content.is('.scrollbar')) {\n            $content.height(height);\n          }\n\n          $content.slideDown(speed);\n        }\n      } else {\n        $this.add($toggle).add($content).removeClass('active');\n\n        if (!$this.is('[data-class-only]')) {\n          if (initialized) {\n            if ($content.is('.scrollbar')) {\n              height = $content.height();\n            }\n\n            $content.stop().slideUp(speed);\n          } else {\n            $content.hide(0);\n          }\n        }\n      }\n    }\n\n    check();\n    initialized = true;\n  });\n} //tabs\n\n\nfunction tabs() {\n  var $tabs = $('.tabs');\n  $tabs.each(function () {\n    var $triggers = $(this).find('.tabs__toggle'),\n        $tabs = $(this).find('.tabs__block'),\n        index = $(this).find('.tabs__block.active').length > 0 ? $tabs.index($(this).find('.tabs__block.active')) : 0;\n    changeTab();\n    $triggers.on('click', function () {\n      index = $triggers.index($(this));\n      changeTab();\n    });\n\n    function changeTab() {\n      $tabs.hide().eq(index).fadeIn(250);\n      $triggers.removeClass('active').eq(index).addClass('active');\n    }\n  });\n} //scroll\n\n\nfunction scrollTo() {\n  var $scrollbtn = $('[data-scroll]'),\n      speed = 500; //ms\n\n  $scrollbtn.on('click', function (event) {\n    event.preventDefault();\n    var href = $(this).attr('href'),\n        $target = $(href);\n\n    if ($target.length) {\n      $('html, body').animate({\n        scrollTop: $target.offset().top\n      }, speed);\n    }\n  });\n} //scroll to reviews\n\n\nfunction scrollToTab() {\n  var $link = $('[data-go-tab]'),\n      speed = 500; //ms\n\n  $link.on('click', function (event) {\n    event.preventDefault();\n    var $tab = $($(this).attr('href')),\n        index = $tab.index('.tabs__block'),\n        y;\n\n    if ($(window).width() < breakpoints.lg) {\n      $('.item-info .toggle-section__head').eq(index).not('.active').trigger('click');\n      y = $tab.offset().top - 50;\n    } else {\n      $('.item-info .tabs__toggle').eq(index).not('.active').trigger('click');\n      y = $tab.offset().top - 40;\n    }\n\n    if ($tab.length) {\n      $('html, body').animate({\n        scrollTop: y\n      }, speed);\n    }\n  });\n}\n\nfunction fixedBlocks() {\n  var $open = $('[data-fixed-toggle]');\n  $open.on('click', function (event) {\n    event.preventDefault();\n    var href = $(this).attr('href'),\n        $block = $(href);\n\n    if ($block.length) {\n      $block.addClass('active');\n      scrollLock.disablePageScroll();\n      var $close = $block.find('[data-fixed-close]');\n      $close.on('click', function (event) {\n        event.preventDefault();\n        $block.removeClass('active');\n        scrollLock.enablePageScroll();\n      });\n    }\n  });\n} //rate\n\n\nfunction rating() {\n  $(document).on('click', '.js-rating__star', function (event) {\n    var $parent = $(event.target).closest('.js-rating'),\n        $star = $(event.target).closest('.js-rating__star'),\n        $stars = $star.parents('.js-rating').find('.js-rating__star'),\n        $input = $star.parents('.js-rating').find('input'),\n        count = +$star.attr('data-index'),\n        $textItems = $parent.find('.js-rating__description-item');\n    $input.val(count);\n    $textItems.removeClass('active');\n    $textItems.eq(count - 1).addClass('active');\n    $stars.each(function (index) {\n      if (index < count) {\n        $(this).addClass('active');\n      } else {\n        $(this).removeClass('active');\n      }\n    });\n  });\n  $(document).on('mousemove mouseleave', '.js-rating__list', function (event) {\n    var $parent = $(event.target).closest('.js-rating'),\n        $rating = $(event.target).closest('.js-rating__list'),\n        $stars = $rating.find('.js-rating__star'),\n        $input = $rating.parents('.js-rating').find('input'),\n        $textItems = $parent.find('.js-rating__description-item');\n\n    if (event.type == 'mousemove' && device.desktop() && $rating.length > 0) {\n      var x = event.clientX - $rating.offset().left,\n          w = $rating.width(),\n          value = x / w * 5;\n      $stars.each(function (index) {\n        if (value > index) {\n          $(this).addClass('active');\n        } else {\n          $(this).removeClass('active');\n        }\n      });\n      $textItems.each(function (index) {\n        if (value > index) {\n          $textItems.removeClass('active');\n          $(this).addClass('active');\n        } else {\n          return false;\n        }\n      });\n    }\n\n    if (event.type == 'mouseleave' && device.desktop() && $rating.length > 0) {\n      var count = $input.val();\n      $textItems.removeClass('active');\n\n      if (count > 0) {\n        $textItems.eq(count - 1).addClass('active');\n        $stars.each(function (index) {\n          if (index < count) {\n            $(this).addClass('active');\n          } else {\n            $(this).removeClass('active');\n          }\n        });\n      } else {\n        $stars.removeClass('active');\n      }\n    }\n  });\n}\n\nfunction calculator() {\n  var change = function change($input, value) {\n    var val = +$input.val();\n    if (value == '-') $input.val(Math.max(val - 1, 1));else if (value == '+') $input.val(val + 1);else $input.val(Math.max(val, 1));\n  };\n\n  $(document).on('click', '.calc-count-block .js-plus', function (event) {\n    change($(event.target).parents('.calc-count-block').find('input'), '+');\n  });\n  $(document).on('click', '.calc-count-block .js-minus', function (event) {\n    change($(event.target).parents('.calc-count-block').find('input'), '-');\n  });\n  $(document).on('input', '.calc-count-block input', function (event) {\n    change($(event.target), $(event.target).val());\n  });\n}\n\nfunction stagesToggle() {\n  var $toggle = $('[data-stage-toggle]'),\n      $stages = $('[data-stage]'),\n      stage = $('.active[data-stage-toggle]').length > 0 ? $('.active[data-stage-toggle]').attr('data-stage-toggle') : 'all';\n  $toggle.on('click', function (event) {\n    event.preventDefault();\n    stage = $(this).attr('data-stage-toggle');\n    check();\n  });\n  check();\n\n  function check() {\n    $toggle.removeClass('active').closest(\"[data-stage-toggle='\".concat(stage, \"']\")).addClass('active');\n\n    if (stage == 'all') {\n      $stages.addClass('active');\n    } else {\n      $stages.each(function () {\n        var attr = $(this).attr('data-stage');\n\n        if (attr == stage) {\n          $(this).addClass('active');\n        } else {\n          $(this).removeClass('active');\n        }\n      });\n    }\n  }\n}\n\nfunction diagram() {\n  var $parent = $('.brigade-diagram__circle');\n\n  function toRadians(value) {\n    return value * (Math.PI / 180);\n  }\n\n  if ($parent.length) {\n    var $circle = $parent.find('.brigade-diagram__circle-item_style-2 circle'),\n        percent = parseInt($parent.attr('data-percent')),\n        $info1 = $('.brigade-diagram__info_style-1'),\n        $info2 = $('.brigade-diagram__info_style-2'),\n        radius = ($parent.height() - 30) / 2,\n        deg2 = 90 - 360 / 100 * percent / 2,\n        deg1 = 360 - deg2,\n        rad2 = toRadians(deg2),\n        rad1 = toRadians(deg1),\n        w = $circle[0].getTotalLength();\n    $circle.css('stroke-dasharray', w);\n    $circle.css('stroke-dashoffset', w - w / 100 * percent);\n    var x1 = radius * Math.cos(rad1),\n        y1 = radius * Math.sin(rad1),\n        x2 = radius * Math.cos(rad2),\n        y2 = radius * Math.sin(rad2);\n    $info1.css({\n      'transform': \"translate(\".concat(-x1, \"px, \").concat(-y1, \"px)\")\n    });\n    $info2.css({\n      'transform': \"translate(\".concat(x2, \"px, \").concat(-y2, \"px)\")\n    });\n  }\n}\n\nfunction jsRange() {\n  var $range = $('.filter-range');\n  $range.each(function () {\n    var $this = $(this),\n        $rangeItem = $this.find('.js-range'),\n        $inputFrom = $this.find(\".filter-range__input-from\"),\n        $inputTo = $this.find(\".filter-range__input-to\"),\n        instance,\n        min = +$rangeItem.attr('data-min'),\n        max = +$rangeItem.attr('data-max'),\n        from = +$inputFrom.attr('data-from') || min,\n        to = +$inputTo.attr('data-to') || max;\n    $rangeItem.ionRangeSlider({\n      skin: \"round\",\n      type: \"double\",\n      min: min,\n      max: max,\n      from: from,\n      to: to,\n      onStart: updateInputs,\n      onChange: updateInputs,\n      onFinish: updateInputs\n    });\n    instance = $rangeItem.data(\"ionRangeSlider\");\n\n    function updateInputs(data) {\n      from = data.from;\n      to = data.to;\n      $inputFrom.prop(\"value\", from);\n      $inputTo.prop(\"value\", to);\n    }\n\n    $inputFrom.on(\"change\", function () {\n      var val = $(this).prop(\"value\"); // validate\n\n      if (val < min) {\n        val = min;\n      } else if (val > to) {\n        val = to;\n      }\n\n      instance.update({\n        from: val\n      });\n      $(this).prop(\"value\", val);\n    });\n    $inputTo.on(\"change\", function () {\n      var val = $(this).prop(\"value\"); // validate\n\n      if (val < from) {\n        val = from;\n      } else if (val > max) {\n        val = max;\n      }\n\n      instance.update({\n        to: val\n      });\n      $(this).prop(\"value\", val);\n    });\n  });\n}\n\nfunction gridToggle() {\n  var $container = $('.catalogue-blocks'),\n      $btn = $('.line-sorting__view-toggle');\n  $btn.on('click', function () {\n    if ($(this).hasClass('line-sorting__view-toggle_row')) {\n      $container.addClass('catalogue-blocks_row');\n    } else {\n      $container.removeClass('catalogue-blocks_row');\n    }\n\n    check();\n  });\n\n  function check() {\n    $btn.removeClass('active');\n\n    if ($container.hasClass('catalogue-blocks_row')) {\n      $('.line-sorting__view-toggle_row').addClass('active');\n    } else {\n      $('.line-sorting__view-toggle_grid').addClass('active');\n    }\n  } // check();\n\n}\n\nvar tooltips = {\n  el: '[data-tippy-content]',\n  init: function init() {\n    tippy(tooltips.el, {\n      duration: 300,\n      trigger: 'click',\n      placement: 'auto',\n      zIndex: 99,\n      offset: [0, 15],\n      maxWidth: 380\n    });\n  }\n};\n\nfunction comparison() {\n  var $property = $('.comparison-property'),\n      $list = $('.comparison-properties'),\n      count = $list.eq(0).find('.comparison-property').length,\n      $toggle = $('.comparison-toggle__button');\n\n  function checkSize() {\n    var $card = $('.comparison-slide .product-card'),\n        cardHeight = [],\n        cardMaxHeight;\n\n    var _loop2 = function _loop2(i) {\n      var values = [],\n          elements = [],\n          max = void 0;\n      $list.each(function (list) {\n        var $properties = $(this).find('.comparison-property');\n        $properties.each(function (item) {\n          if (item == i) {\n            $(this).css('height', 'auto');\n            elements[list] = this;\n            values[list] = $(this).height();\n          }\n        });\n      });\n      max = Math.max.apply(null, values);\n      $(elements).height(max);\n    };\n\n    for (var i = 0; i < count; i++) {\n      _loop2(i);\n    }\n\n    $card.each(function (index) {\n      $(this).css('height', 'auto');\n      cardHeight[index] = $(this).height();\n    });\n    cardMaxHeight = Math.max.apply(null, cardHeight);\n    $card.height(cardMaxHeight);\n  }\n\n  $property.on('customTouchstart customMouseenter', function (event) {\n    var index = $(this).index();\n    $list.each(function () {\n      var $properties = $(this).find('.comparison-property');\n\n      if (event.type == 'customTouchstart') {\n        $properties.eq(index).addClass('touch');\n      } else {\n        $properties.eq(index).addClass('hover');\n      }\n    });\n  });\n  $property.on('customTouchend customMouseleave', function () {\n    var index = $(this).index();\n    $list.each(function () {\n      var $properties = $(this).find('.comparison-property');\n      $properties.eq(index).removeClass('touch').removeClass('hover');\n    });\n  });\n\n  if ($property.length) {\n    checkSize();\n    $(window).on('resize', function (event) {\n      setTimeout(function () {\n        checkSize();\n      }, 500);\n    });\n  } //найти отличающиееся поля\n\n\n  var _loop3 = function _loop3(i) {\n    var values = [],\n        elements = [],\n        flag = void 0;\n    $('.comparison-slider .comparison-properties').each(function (list) {\n      var $properties = $(this).find('.comparison-property');\n      $properties.each(function (item) {\n        if (item == i) {\n          elements[list] = this;\n          values[list] = $(this).text();\n        }\n      });\n    });\n    values.forEach(function (el) {\n      if (el !== values[0]) {\n        flag = false;\n      }\n    });\n\n    if (flag == false) {\n      $(elements).addClass('comparison-property_difference');\n      $('.comparison__aside').find('.comparison-property').eq(i).addClass('comparison-property_difference');\n    }\n  };\n\n  for (var i = 0; i < count - 1; i++) {\n    _loop3(i);\n  }\n\n  $toggle.on('click', function () {\n    $toggle.removeClass('active');\n    $(this).addClass('active');\n\n    if ($(this).hasClass('comparison-toggle__button-all')) {\n      $property.show();\n    } else {\n      $property.hide();\n      $('.comparison-property_difference').show();\n    }\n  });\n} //gallery\n\n\nfunction gallery() {\n  if ($.fancybox) {\n    //относительно страницы а не js\n    var close = '<svg class=\"icon\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.71 1.71004L16.29 0.290039L9.00004 7.59004L1.71004 0.290039L0.290039 1.71004L7.59004 9.00004L0.290039 16.29L1.71004 17.71L9.00004 10.41L16.29 17.71L17.71 16.29L10.41 9.00004L17.71 1.71004Z\"/></svg>',\n        arrow = '<svg class=\"icon\" width=\"12\" height=\"20\" viewBox=\"0 0 12 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.18002 19.0499L0.77002 17.6399L8.40002 9.99995L0.77002 2.35995L2.18002 0.949951L11.23 9.99995L2.18002 19.0499Z\"/></svg>',\n        zoom = '<svg class=\"icon\" width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M20.21 18.79L14.31 12.9C15.4084 11.5032 16.0038 9.77692 16 8C16 6.41775 15.5308 4.87103 14.6518 3.55544C13.7727 2.23985 12.5233 1.21447 11.0615 0.608967C9.59966 0.00346625 7.99113 -0.15496 6.43928 0.153721C4.88743 0.462403 3.46197 1.22433 2.34315 2.34315C1.22433 3.46197 0.462403 4.88743 0.153721 6.43928C-0.15496 7.99113 0.00346625 9.59966 0.608967 11.0615C1.21447 12.5233 2.23985 13.7727 3.55544 14.6518C4.87103 15.5308 6.41775 16 8 16C9.77692 16.0038 11.5032 15.4084 12.9 14.31L18.79 20.21L20.21 18.79ZM8 14C6.81332 14 5.65328 13.6481 4.66658 12.9888C3.67989 12.3295 2.91085 11.3925 2.45673 10.2961C2.0026 9.19975 1.88378 7.99335 2.11529 6.82946C2.3468 5.66558 2.91825 4.59648 3.75736 3.75736C4.59648 2.91825 5.66558 2.3468 6.82946 2.11529C7.99335 1.88378 9.19975 2.0026 10.2961 2.45673C11.3925 2.91085 12.3295 3.67989 12.9888 4.66658C13.6481 5.65328 14 6.81332 14 8C14 9.5913 13.3679 11.1174 12.2426 12.2426C11.1174 13.3679 9.5913 14 8 14Z\"></path></svg>',\n        downlaod = '<svg width=\"18\" height=\"20\" viewBox=\"0 0 18 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.71 9.48531L13.29 8.06531L10 11.3553V0.695312H8V11.3553L4.71 8.06531L3.29 9.48531L9 15.1853L14.71 9.48531ZM0 17.6953V19.6953H18V17.6953H0Z\"/></svg>',\n        thumbs = '<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 14H18V18H14V14Z\"/><path d=\"M7 14H11V18H7V14Z\"/><path d=\"M0 14H4V18H0V14Z\"/><path d=\"M14 7H18V11H14V7Z\"/><path d=\"M7 7H11V11H7V7Z\"/><path d=\"M0 7H4V11H0V7Z\"/><path d=\"M14 0H18V4H14V0Z\"/><path d=\"M7 0H11V4H7V0Z\"/><path d=\"M0 0H4V4H0V0Z\"/></svg>';\n    $.fancybox.defaults.btnTpl.close = \"<button data-fancybox-close class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--close\\\" title=\\\"{{CLOSE}}\\\">\".concat(close, \"</button>\");\n    $.fancybox.defaults.btnTpl.arrowLeft = \"<button data-fancybox-prev class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--arrow_left\\\" title=\\\"{{PREV}}\\\">\".concat(arrow, \"</button>\");\n    $.fancybox.defaults.btnTpl.arrowRight = \"<button data-fancybox-prev class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--arrow_right\\\" title=\\\"{{NEXT}}\\\">\".concat(arrow, \"</button>\");\n    $.fancybox.defaults.btnTpl.zoom = \"<button data-fancybox-zoom class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--zoom\\\" title=\\\"{{ZOOM}}\\\">\".concat(zoom, \"</button>\");\n    $.fancybox.defaults.btnTpl.download = \"<a download data-fancybox-download class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--download\\\" href=\\\"javascript:;\\\" title=\\\"{{DOWNLOAD}}\\\">\".concat(downlaod, \"</a>\");\n    $.fancybox.defaults.btnTpl.thumbs = \"<button data-fancybox-thumbs class=\\\"button button_style-1 button_icon fancybox-button fancybox-button--thumbs\\\" title=\\\"{{THUMBS}}\\\">\".concat(thumbs, \"</button>\");\n    $.fancybox.defaults.buttons = [\"zoom\", \"close\"];\n    $.fancybox.defaults.i18n.ru = {\n      CLOSE: 'Закрыть',\n      NEXT: 'Следующий слайд',\n      PREV: 'Предидущий слайд',\n      ERROR: 'Ошибка загрузки, попробуйте позже.',\n      PLAY_START: 'Запустить слайд-шоу',\n      PLAY_STOP: 'Остановить слайд-шоу',\n      FULL_SCREEN: 'Полноэкранный режим',\n      THUMBS: 'Миниатюры',\n      DOWNLOAD: 'Загрузить',\n      SHARE: 'Поделиться',\n      ZOOM: 'Увеличить'\n    };\n    $.fancybox.defaults.lang = 'ru';\n    $.fancybox.defaults.loop = true;\n    $.fancybox.defaults.autoFocus = false;\n    $.fancybox.defaults.backFocus = false;\n    $.fancybox.defaults.animationDuration = 500;\n    $.fancybox.defaults.animationEffect = \"fade\";\n    $.fancybox.defaults.hideScrollbar = false;\n    $('.slick-slide [data-fancybox]').on('click', function () {\n      var $selector = $(this).parents('.slick-slider').find('.slick-slide:not(.slick-cloned) a');\n      $.fancybox.open($selector, {\n        selector: $selector,\n        backFocus: false\n      }, $selector.index(this));\n      return false;\n    });\n    $(document).on('beforeShow.fb', function (e, instance, slide) {\n      scrollLock.disablePageScroll();\n    });\n    $(document).on('beforeClose.fb', function (e, instance, slide) {\n      scrollLock.clearQueueScrollLocks();\n      scrollLock.enablePageScroll();\n    });\n  }\n}\n\nvar SliderConstructor = /*#__PURE__*/function () {\n  function SliderConstructor(element) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, SliderConstructor);\n\n    this.element = element;\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(SliderConstructor, [{\n    key: \"init\",\n    value: function init() {\n      var _this9 = this;\n\n      this.sliderWidth = window.innerWidth;\n      this.htmlElements = {};\n      this.htmlElements.vector = '<svg class=\"icon\" fill=\"currentColor\" viewBox=\"0 0 10.5 18.1\"><path stroke=\"none\" d=\"M9,0l1.4,1.4L2.8,9l7.6,7.6L9,18.1L0,9C0,9,9.1,0,9,0z\"></path></svg>';\n      this.htmlElements.nextArrow = \"<button type=\\\"button\\\" class=\\\"button button_style-1 slick-next\\\">\".concat(this.htmlElements.vector, \"</button>\");\n      this.htmlElements.prevArrow = \"<button type=\\\"button\\\" class=\\\"button button_style-1 slick-prev\\\">\".concat(this.htmlElements.vector, \"</button>\");\n      this.params = {};\n      this.params.autoplay = this.element.getAttribute('data-autoplay-timeout') !== null;\n      this.params.autoplayTimeout = +this.element.getAttribute('data-autoplay-timeout') || 5000;\n      this.params.arrows = this.element.getAttribute('data-no-arrows') === null ? true : false;\n      this.params.adaptiveHeight = this.element.getAttribute('data-adaptive-height') !== null;\n      this.params.count = {};\n      this.params.count.xs = +this.element.getAttribute('data-slides') || 1;\n      this.params.count.sm = +this.element.getAttribute('data-sm-slides') || this.params.count.xs;\n      this.params.count.md = +this.element.getAttribute('data-md-slides') || this.params.count.sm;\n      this.params.count.lg = +this.element.getAttribute('data-lg-slides') || this.params.count.md;\n      this.params.count.xl = +this.element.getAttribute('data-xl-slides') || this.params.count.lg;\n      this.params.rows = {};\n      this.params.rows.xs = +this.element.getAttribute('data-rows') || 1, this.params.rows.sm = +this.element.getAttribute('data-sm-rows') || this.params.rows.xs, this.params.rows.md = +this.element.getAttribute('data-md-rows') || this.params.rows.sm, this.params.rows.lg = +this.element.getAttribute('data-lg-rows') || this.params.rows.md, this.params.rows.xl = +this.element.getAttribute('data-xl-rows') || this.params.rows.lg;\n      this.params.state = {};\n      Object.keys(breakpoints).forEach(function (key, index) {\n        var breakpoint = index !== 0 ? '-' + key + '-' : '-';\n\n        var attr = _this9.element.getAttribute(\"data\".concat(breakpoint, \"mounted\"));\n\n        if (attr === null && index !== 0) {\n          var prevKey = Object.keys(breakpoints)[index - 1];\n          _this9.params.state[key] = _this9.params.state[prevKey];\n        } else if (attr === 'true' || index === 0 && attr !== 'false') {\n          _this9.params.state[key] = true;\n        } else {\n          _this9.params.state[key] = false;\n        }\n      });\n      this.slides = [];\n      this.containsMobileHiddenSlides = false;\n      this.element.childNodes.forEach(function (slide) {\n        if (!slide.tagName) return;\n\n        if (slide.getAttribute('data-slide-mobile-hidden') !== null) {\n          _this9.containsMobileHiddenSlides = true;\n        }\n\n        _this9.slides.push(slide);\n      });\n      this.checkSliderState();\n      this.checkSliderStateDebounced = debounce(this.checkSliderState, 500, this);\n      window.addEventListener('resize', this.checkSliderStateDebounced);\n    }\n  }, {\n    key: \"checkSliderState\",\n    value: function checkSliderState() {\n      if (this.mounted && this.sliderWidth === window.innerWidth) return;\n      this.sliderWidth = window.innerWidth;\n\n      if (this.mounted) {\n        this.unmount();\n      }\n\n      var state;\n\n      for (var breakpoint in breakpoints) {\n        if (window.innerWidth >= breakpoints[breakpoint]) {\n          state = this.params.state[breakpoint];\n        }\n      }\n\n      if (state) {\n        this.element.classList.remove('visible');\n\n        if (this.containsMobileHiddenSlides) {\n          this.checkSlidesVisibility();\n        }\n\n        this.mount();\n      } else {\n        this.element.classList.add('visible');\n      }\n    }\n  }, {\n    key: \"checkSlidesVisibility\",\n    value: function checkSlidesVisibility() {\n      var _this10 = this;\n\n      this.slides.forEach(function (slide) {\n        slide.remove();\n      });\n      this.slides.forEach(function (slide) {\n        var shouldBeHidden = slide.getAttribute('data-slide-mobile-hidden') !== null;\n        var breakpoint = window.innerWidth < breakpoints.sm;\n\n        if (!(shouldBeHidden && breakpoint)) {\n          _this10.element.insertAdjacentElement('beforeend', slide);\n        }\n      });\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      $(this.element).slick({\n        autoplay: this.params.autoplay,\n        autoplaySpeed: this.params.autoplayTimeout,\n        mobileFirst: true,\n        slidesToShow: this.params.count.xs,\n        slidesToScroll: this.params.count.xs,\n        rows: this.params.rows.xs,\n        nextArrow: this.htmlElements.nextArrow,\n        prevArrow: this.htmlElements.prevArrow,\n        arrows: this.params.arrows,\n        adaptiveHeight: this.params.adaptiveHeight,\n        dots: true,\n        accessibility: false,\n        responsive: [{\n          breakpoint: breakpoints.sm - 1,\n          settings: {\n            slidesToShow: this.params.count.sm,\n            slidesToScroll: this.params.count.sm,\n            rows: this.params.rows.sm\n          }\n        }, {\n          breakpoint: breakpoints.md - 1,\n          settings: {\n            slidesToShow: this.params.count.md,\n            slidesToScroll: this.params.count.md,\n            rows: this.params.rows.md\n          }\n        }, {\n          breakpoint: breakpoints.lg - 1,\n          settings: {\n            slidesToShow: this.params.count.lg,\n            slidesToScroll: this.params.count.lg,\n            rows: this.params.rows.lg\n          }\n        }, {\n          breakpoint: breakpoints.xl - 1,\n          settings: {\n            slidesToShow: this.params.count.xl,\n            slidesToScroll: this.params.count.xl,\n            rows: this.params.rows.xl\n          }\n        }]\n      });\n      this.mounted = true;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      $(this.element).slick('unslick');\n      this.mounted = false;\n    }\n  }]);\n\n  return SliderConstructor;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/main.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _classCallCheck; }\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcz84MGQyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _createClass; }\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcz9kYjVhIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/createClass.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scripts/main.js");
/******/ 	
/******/ })()
;